# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/125tYwWJoHS2aHkN8hOpSbCpsI_RxvrkH
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
import joblib
from datetime import datetime
import os

# ============ CONFIG ============
st.set_page_config(page_title="Daewoo Bus Delay Predictor", page_icon="üöå", layout="centered")

st.title("üöå Daewoo Bus Delay Prediction")
st.markdown("This demo trains a simple model using **synthetic Daewoo route data** and predicts expected delay.")

# --- Generate Synthetic Dataset (if none exists) ---
@st.cache_data
def generate_synthetic_data():
    cities = ["Lahore", "Islamabad", "Rawalpindi", "Multan", "Karachi", "Faisalabad", "Peshawar"]
    time_slots = ["05:00", "07:00", "09:00", "11:00", "13:00", "15:00", "17:00", "19:00", "21:00"]
    days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    weather_conditions = ["Clear", "Rainy", "Foggy"]

    base_durations = {
        ("Lahore", "Islamabad"): 270,
        ("Lahore", "Faisalabad"): 120,
        ("Lahore", "Multan"): 300,
        ("Karachi", "Lahore"): 720,
        ("Islamabad", "Peshawar"): 180,
        ("Karachi", "Multan"): 660,
        ("Multan", "Rawalpindi"): 300,
    }

    data = []
    for origin in cities:
        for dest in cities:
            if origin == dest:
                continue
            base_time = base_durations.get((origin, dest)) or base_durations.get((dest, origin)) or np.random.randint(200, 600)
            for _ in range(40):
                dep_time = np.random.choice(time_slots)
                dep_min = int(dep_time.split(":")[0]) * 60 + int(dep_time.split(":")[1])
                delay = max(0, int(np.random.normal(loc=20, scale=10)))
                data.append({
                    "Origin": origin,
                    "Destination": dest,
                    "Departure": dep_min,
                    "Scheduled_Duration(min)": base_time,
                    "Delay(min)": delay,
                    "Day": np.random.choice(days),
                    "Weather": np.random.choice(weather_conditions),
                })
    return pd.DataFrame(data)

# --- Train or Load Model ---
@st.cache_resource
def get_model():
    if os.path.exists("model.pkl") and os.path.exists("encoders.pkl"):
        model = joblib.load("model.pkl")
        encoders = joblib.load("encoders.pkl")
        return model, encoders

    df = generate_synthetic_data()
    encoders = {}
    for col in ["Origin", "Destination", "Day", "Weather"]:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        encoders[col] = le

    X = df[["Origin", "Destination", "Scheduled_Duration(min)", "Departure", "Day", "Weather"]]
    y = df["Delay(min)"]

    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X, y)

    joblib.dump(model, "model.pkl")
    joblib.dump(encoders, "encoders.pkl")

    return model, encoders

model, encoders = get_model()
st.success("‚úÖ Model is ready for predictions!")

# --- User Input ---
st.header("üßæ Trip Details")
col1, col2 = st.columns(2)
with col1:
    origin = st.selectbox("Origin City", ["Lahore", "Islamabad", "Rawalpindi", "Multan", "Karachi", "Faisalabad", "Peshawar"])
    departure_time = st.time_input("Departure Time", datetime.now().time())
with col2:
    destination = st.selectbox("Destination City", ["Lahore", "Islamabad", "Rawalpindi", "Multan", "Karachi", "Faisalabad", "Peshawar"])
    travel_date = st.date_input("Travel Date", datetime.today())

weather = st.selectbox("Weather Condition", ["Clear", "Rainy", "Foggy"])

# --- Predict Button ---
if st.button("üö¶ Predict Delay"):
    dep_minutes = departure_time.hour * 60 + departure_time.minute
    day_name = travel_date.strftime("%A")

    # Encode safely
    def safe_encode(encoder_dict, col, val):
        try:
            return encoder_dict[col].transform([val])[0]
        except:
            return 0

    origin_val = safe_encode(encoders, "Origin", origin)
    dest_val = safe_encode(encoders, "Destination", destination)
    day_val = safe_encode(encoders, "Day", day_name)
    weather_val = safe_encode(encoders, "Weather", weather)
    avg_duration = 360  # default 6 hours

    X_input = [[origin_val, dest_val, avg_duration, dep_minutes, day_val, weather_val]]
    delay = model.predict(X_input)[0]

    st.success(f"üïí Predicted Delay: **{delay:.2f} minutes**")

    if delay > 30:
        st.error("‚ö†Ô∏è High delay expected ‚Äî consider leaving earlier or taking the next bus.")
    elif delay > 10:
        st.warning("‚ö†Ô∏è Moderate delay expected.")
    else:
        st.balloons()
        st.success("‚úÖ Low chance of delay ‚Äî your trip should be on time!")

